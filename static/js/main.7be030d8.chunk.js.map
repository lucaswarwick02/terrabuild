{"version":3,"sources":["components/JsonManager.js","components/BuildSummary.js","components/Header.js","HelperFunctions.js","components/ArmorItem.js","components/ArmorModal.js","components/App.js","reportWebVitals.js","index.js"],"names":["headData","JSON","parse","stringify","headJsonData","chestData","chestJsonData","legsData","legsJsonData","armorSetsData","armorSetsJsonData","queryHead","id","_step","_iterator","_createForOfIteratorHelper","s","n","done","item","value","itemID","err","e","f","queryChest","_step2","_iterator2","queryLegs","_step3","_iterator3","BuildSummary","props","totalArmor","data","head","defence","chest","legs","setBonus","headID","chestID","legsID","_step4","armorSet","_iterator4","possibleSet","set","bonus","querySetBonus","setEffect","_step5","_iterator5","effect","querySetEffect","react_default","a","createElement","style","textDecoration","Header","getRarityColor","tier","originalSort","item1","item2","ArmorItem","color","rarity","borderColor","key","className","onClick","src","concat","process","alt","name","ArmorModal","handleArmorChange","setData","prev","Object","objectSpread","defineProperty","parseInt","document","getElementById","display","modalType","sort","getItems","map","components_ArmorItem","App","_useState","useState","_useState2","slicedToArray","isLoading","setIsLoading","_useState3","_useState4","armorModalType","setArmorModalType","_useState5","_useState6","useEffect","armorModalClick","components_Header","components_ArmorModal","components_BuildSummary","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","components_App"],"mappings":"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","file":"static/js/main.7be030d8.chunk.js","sourcesContent":["import headJsonData from '../resources/head.json';\r\nimport chestJsonData from '../resources/chest.json';\r\nimport legsJsonData from '../resources/legs.json';\r\nimport armorSetsJsonData from '../resources/armor_sets.json'\r\n\r\n/**\r\n * ArmorItem config\r\n * @typedef {Object} ArmorItem - A Terraria item\r\n * @property {Number} itemID - Internal ID of the item\r\n * @property {String} name - Vanity name of the item\r\n * @property {Number} rarity - Rarity used for color of the item\r\n * @property {Number} defence - Number of defence points\r\n * @property {String} bonus - Bonus the item gives, not the complete set\r\n */\r\n\r\n/**\r\n * ArmorSetType config\r\n * @typedef {Object} ArmorSetType - Set bonus for an Armor Set\r\n * @property {Number[]} set - List of IDs for the Armor Set\r\n * @property {String} bonus - Set Bonus\r\n * @property {String} effect - Set Effect\r\n */\r\n\r\n/** @type {ArmorItem[]} */\r\nexport const headData = JSON.parse(JSON.stringify(headJsonData));\r\n/** @type {ArmorItem[]} */\r\nexport const chestData = JSON.parse(JSON.stringify(chestJsonData));\r\n/** @type {ArmorItem[]} */\r\nexport const legsData = JSON.parse(JSON.stringify(legsJsonData));\r\n/** @type {ArmorSetType[]} */\r\nexport const armorSetsData = JSON.parse(JSON.stringify(armorSetsJsonData));\r\n\r\n/**\r\n *\r\n * @param {Number} id - Internal ID of the item\r\n * @returns {ArmorItem} - JSON Armor Item\r\n */\r\nexport function queryHead(id) {\r\n    for (const item of headData) {\r\n        if (item.itemID === id) {\r\n            return item;\r\n        }\r\n    }\r\n    return headData[0];\r\n}\r\n\r\n/**\r\n *\r\n * @param {Number} id - Internal ID of the item\r\n * @returns {ArmorItem} - JSON Armor Item\r\n */\r\nexport function queryChest(id) {\r\n    for (const item of chestData) {\r\n        if (item.itemID === id) {\r\n            return item;\r\n        }\r\n    }\r\n    return chestData[0];\r\n}\r\n\r\n/**\r\n *\r\n * @param {Number} id - Internal ID of the item\r\n * @returns {ArmorItem} - JSON Armor Item\r\n */\r\nexport function queryLegs(id) {\r\n    for (const item of legsData) {\r\n        if (item.itemID === id) {\r\n            return item;\r\n        }\r\n    }\r\n    return legsData[0];\r\n}\r\n\r\n/**\r\n *\r\n * @param {Number} headID - Internal ID of the head item\r\n * @param {Number} chestID - Internal ID of the chest item\r\n * @param {Number} legsID - Internal ID of the legs item\r\n * @returns {String|null} - Either return the Set Bonus, or null\r\n */\r\nexport function querySetBonus(headID, chestID, legsID) {\r\n    let armorSet = [headID, chestID, legsID];\r\n    for (const possibleSet of armorSetsData) {\r\n        const isSet = JSON.stringify(armorSet) === JSON.stringify(possibleSet.set);\r\n        if (isSet) {\r\n            return possibleSet.bonus;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n *\r\n * @param {Number} headID - Internal ID of the head item\r\n * @param {Number} chestID - Internal ID of the chest item\r\n * @param {Number} legsID - Internal ID of the legs item\r\n * @returns {String|null} - Either return the Set Effect, or null\r\n */\r\nexport function querySetEffect(headID, chestID, legsID) {\r\n    let armorSet = [headID, chestID, legsID];\r\n    for (const possibleSet of armorSetsData) {\r\n        const isSet = JSON.stringify(armorSet) === JSON.stringify(possibleSet.set);\r\n        if (isSet) {\r\n            return possibleSet.effect;\r\n        }\r\n    }\r\n    return null;\r\n}","import '../css/BuildSummary.css';\r\nimport React, { useEffect } from 'react';\r\nimport { queryHead, queryChest, queryLegs, querySetBonus, querySetEffect } from './JsonManager'\r\n\r\nfunction BuildSummary(props) {\r\n\r\n    /**\r\n     * Sum together the defence of each Armor piece\r\n     * @type {Number}\r\n     */\r\n    const totalArmor = queryHead(props.data.head).defence + queryChest(props.data.chest).defence + queryLegs(props.data.legs).defence;\r\n\r\n    /**\r\n     * Query JSON for the Set Bonus\r\n     * @type {String|null}\r\n     */\r\n    const setBonus = querySetBonus(props.data.head, props.data.chest, props.data.legs);\r\n    /**\r\n     * Query JSON for the Set Effect\r\n     * @type {String|null}\r\n     */\r\n    const setEffect = querySetEffect(props.data.head, props.data.chest, props.data.legs);\r\n\r\n    return (\r\n        <div id=\"buildSummary\">\r\n            <h3>Build Summary</h3>\r\n            <p><span style={{textDecoration: \"underline\"}}>Total Armor:</span> {totalArmor}</p>\r\n            {setBonus && <p><span style={{textDecoration: \"underline\"}}>Set Bonus:</span> {setBonus}</p>}\r\n            {setEffect && <p><span style={{textDecoration: \"underline\"}}>Set Effect:</span> {setEffect}</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BuildSummary;","import React from 'react';\r\nimport '../css/Header.css';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div id=\"header\">\r\n            <h1>Terrabuild</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","/**\r\n *\r\n * @param {Number} tier - Rarity number, between -1 and 10\r\n * @returns {String} - Hex number as String\r\n */\r\nexport function getRarityColor(tier) {\r\n    switch (tier) {\r\n        case -1:\r\n            return \"#7f807f\";\r\n        case 0:\r\n            return \"#f3f3f3\";\r\n        case 1:\r\n            return \"#8988e9\";\r\n        case 2:\r\n            return \"#8aec8a\";\r\n        case 3:\r\n            return \"#e8b889\";\r\n        case 4:\r\n            return \"#f08e8d\";\r\n        case 5:\r\n            return \"#f590f5\";\r\n        case 6:\r\n            return \"#c294eb\";\r\n        case 7:\r\n            return \"#85e209\";\r\n        case 8:\r\n            return \"#e3e409\";\r\n        case 9:\r\n            return \"#04b2e3\";\r\n        case 10:\r\n            return \"#eb265d\";\r\n        default:\r\n            return getRarityColor(-1);\r\n    }\r\n}\r\n\r\n/**\r\n * Used in Array.sort to sort by Rarity\r\n * @param {ArmorItem} item1 - An Armor Item\r\n * @param {ArmorItem} item2 - The next Armor Item\r\n * @returns {number} - -1 = item1, 1 = item2, 0 = equal\r\n */\r\nexport const sortByRarity = (item1, item2) => {\r\n    return item1.rarity - item2.rarity;\r\n}\r\n\r\n/**\r\n * Used in Array.sort to sort by name\r\n * @param {ArmorItem} item1 - An Armor Item\r\n * @param {ArmorItem} item2 - The next Armor Item\r\n * @returns {number} - -1 = item1, 1 = item2, 0 = equal\r\n */\r\nexport const sortByName = (item1, item2) => {\r\n    let name1 = item1.name.toLowerCase();\r\n    let name2 = item2.name.toLowerCase();\r\n\r\n    if (name1 < name2) {\r\n        return -1;\r\n    }\r\n    if (name1 > name2) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\n/**\r\n * Used in Array.sort to sort by the original order\r\n * @param {ArmorItem} item1 - An Armor Item\r\n * @param {ArmorItem} item2 - The next Armor Item\r\n * @returns {number} - -1 always, for the original order\r\n */\r\nexport const originalSort = (item1, item2) => {\r\n    return -1;\r\n}","import React from 'react';\r\nimport '../css/ArmorItem.css'\r\nimport { getRarityColor } from \"../HelperFunctions\"\r\n\r\n/**\r\n * Required props:\r\n *      - onClick(modalType, item.itemID)\r\n *      - item\r\n *      - modalType\r\n */\r\nfunction ArmorItem(props) {\r\n\r\n    const style = {\r\n        color: getRarityColor(props.item.rarity),\r\n        borderColor: getRarityColor(props.item.rarity)\r\n    };\r\n\r\n    return (\r\n        <div key={props.item.itemID}\r\n             className=\"itemDisplay\"\r\n             onClick={props.onClick}\r\n             style={style}>\r\n            <div className=\"itemImageContainer\">\r\n                {(props.item.itemID !== 0) && <img className=\"itemImage\" src={`${process.env.PUBLIC_URL}/images/${props.item.itemID}.png`}\r\n                      alt={props.item.name}/>}\r\n            </div>\r\n            <span className=\"itemCaption\" style={style}>{props.item.name}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ArmorItem;","import React from 'react';\r\nimport ArmorItem from './ArmorItem'\r\nimport { headData, chestData, legsData} from './JsonManager'\r\nimport { originalSort } from \"../HelperFunctions\"\r\nimport '../css/ArmorModal.css';\r\n\r\nfunction ArmorModal(props) {\r\n\r\n    /**\r\n     * Removes the Modal\r\n     */\r\n    function handleClose () {\r\n        document.getElementById(\"armorModal\").style.display = \"none\";\r\n    }\r\n\r\n    /**\r\n     * Get a certain set of items depending on the\r\n     * @returns {ArmorItem[]} - Array of JSON objects for Armor Items\r\n     */\r\n    const getItems = () => {\r\n        switch (props.modalType) {\r\n            case \"head\":\r\n                return headData.sort(originalSort);\r\n            case \"chest\":\r\n                return chestData.sort(originalSort);\r\n            case \"legs\":\r\n                return legsData.sort(originalSort);\r\n            default:\r\n                return headData.sort(originalSort);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the stored armor information\r\n     * @param event - From the HTMLElement, used for determining values\r\n     */\r\n    const handleArmorChange = (name, value) => {\r\n        props.setData( prev => ({\r\n            ...prev,\r\n            [name]: parseInt(value)\r\n        }));\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <div id=\"armorModal\">\r\n            <div id=\"armorModalContent\">\r\n                <h1>Armor Modal</h1>\r\n                {getItems().map(item => (\r\n                    <ArmorItem key={item.itemID} onClick={() => handleArmorChange(props.modalType, item.itemID)} item={item} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ArmorModal;","import React, { useState, useEffect } from 'react';\r\nimport BuildSummary from \"./BuildSummary\"\r\nimport Header from \"./Header\";\r\nimport ArmorModal from \"./ArmorModal\";\r\nimport ArmorItem from \"./ArmorItem\"\r\nimport {queryChest, queryHead, queryLegs} from \"./JsonManager\";\r\nimport '../css/App.css';\r\n\r\nfunction App() {\r\n    // * isLoading is used for making sure that content isn't rendered\r\n    // * until the JSON data is loaded.\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [armorModalType, setArmorModalType] = useState(\"head\");\r\n\r\n    // Stores the data that the user has selected\r\n    const [data, setData] = useState({\r\n        head: 0,\r\n        chest: 0,\r\n        legs: 0\r\n    });\r\n\r\n    // Loads the JSON data into variables after initial mount\r\n    useEffect(() => {\r\n        setIsLoading(false);\r\n    }, []);\r\n\r\n    /**\r\n     * Update the type of Armor Modal displayed\r\n     * @param {String} armorModalType - Either \"head\", \"chest\" or \"legs\"\r\n     * @returns {(function(): void)} - Required to work with onClick\r\n     */\r\n    const armorModalClick = armorModalType => () => {\r\n        setArmorModalType(armorModalType);\r\n        document.getElementById(\"armorModal\").style.display = \"block\";\r\n    }\r\n\r\n    if (!isLoading) {\r\n        return (\r\n            <div className=\"App\">\r\n                <Header />\r\n                <div id=\"buildSelection\">\r\n                    <ArmorItem onClick={armorModalClick(\"head\")} item={queryHead(data.head)} />\r\n                    <ArmorItem onClick={armorModalClick(\"chest\")} item={queryChest(data.chest)} />\r\n                    <ArmorItem onClick={armorModalClick(\"legs\")} item={queryLegs(data.legs)} />\r\n                    <ArmorModal\r\n                        data={data}\r\n                        setData={setData}\r\n                        modalType={armorModalType}\r\n                    />\r\n                </div>\r\n                <BuildSummary data={data} />\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return (<p>Loading...</p>);\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}